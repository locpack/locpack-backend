// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"locpack-backend/internal/storage/entity"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPlaceRepository creates a new instance of MockPlaceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlaceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlaceRepository {
	mock := &MockPlaceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlaceRepository is an autogenerated mock type for the PlaceRepository type
type MockPlaceRepository struct {
	mock.Mock
}

type MockPlaceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlaceRepository) EXPECT() *MockPlaceRepository_Expecter {
	return &MockPlaceRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) Create(p entity.Place) error {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.Place) error); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlaceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPlaceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - p
func (_e *MockPlaceRepository_Expecter) Create(p interface{}) *MockPlaceRepository_Create_Call {
	return &MockPlaceRepository_Create_Call{Call: _e.mock.On("Create", p)}
}

func (_c *MockPlaceRepository_Create_Call) Run(run func(p entity.Place)) *MockPlaceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Place))
	})
	return _c
}

func (_c *MockPlaceRepository_Create_Call) Return(err error) *MockPlaceRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlaceRepository_Create_Call) RunAndReturn(run func(p entity.Place) error) *MockPlaceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameOrAddress provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) GetByNameOrAddress(query string) ([]entity.Place, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameOrAddress")
	}

	var r0 []entity.Place
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]entity.Place, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []entity.Place); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Place)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlaceRepository_GetByNameOrAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameOrAddress'
type MockPlaceRepository_GetByNameOrAddress_Call struct {
	*mock.Call
}

// GetByNameOrAddress is a helper method to define mock.On call
//   - query
func (_e *MockPlaceRepository_Expecter) GetByNameOrAddress(query interface{}) *MockPlaceRepository_GetByNameOrAddress_Call {
	return &MockPlaceRepository_GetByNameOrAddress_Call{Call: _e.mock.On("GetByNameOrAddress", query)}
}

func (_c *MockPlaceRepository_GetByNameOrAddress_Call) Run(run func(query string)) *MockPlaceRepository_GetByNameOrAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPlaceRepository_GetByNameOrAddress_Call) Return(places []entity.Place, err error) *MockPlaceRepository_GetByNameOrAddress_Call {
	_c.Call.Return(places, err)
	return _c
}

func (_c *MockPlaceRepository_GetByNameOrAddress_Call) RunAndReturn(run func(query string) ([]entity.Place, error)) *MockPlaceRepository_GetByNameOrAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameOrAddressFull provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) GetByNameOrAddressFull(query string) ([]entity.Place, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameOrAddressFull")
	}

	var r0 []entity.Place
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]entity.Place, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []entity.Place); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Place)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlaceRepository_GetByNameOrAddressFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameOrAddressFull'
type MockPlaceRepository_GetByNameOrAddressFull_Call struct {
	*mock.Call
}

// GetByNameOrAddressFull is a helper method to define mock.On call
//   - query
func (_e *MockPlaceRepository_Expecter) GetByNameOrAddressFull(query interface{}) *MockPlaceRepository_GetByNameOrAddressFull_Call {
	return &MockPlaceRepository_GetByNameOrAddressFull_Call{Call: _e.mock.On("GetByNameOrAddressFull", query)}
}

func (_c *MockPlaceRepository_GetByNameOrAddressFull_Call) Run(run func(query string)) *MockPlaceRepository_GetByNameOrAddressFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPlaceRepository_GetByNameOrAddressFull_Call) Return(places []entity.Place, err error) *MockPlaceRepository_GetByNameOrAddressFull_Call {
	_c.Call.Return(places, err)
	return _c
}

func (_c *MockPlaceRepository_GetByNameOrAddressFull_Call) RunAndReturn(run func(query string) ([]entity.Place, error)) *MockPlaceRepository_GetByNameOrAddressFull_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPublicID provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) GetByPublicID(placeID string) (entity.Place, error) {
	ret := _mock.Called(placeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicID")
	}

	var r0 entity.Place
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (entity.Place, error)); ok {
		return returnFunc(placeID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) entity.Place); ok {
		r0 = returnFunc(placeID)
	} else {
		r0 = ret.Get(0).(entity.Place)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(placeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlaceRepository_GetByPublicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPublicID'
type MockPlaceRepository_GetByPublicID_Call struct {
	*mock.Call
}

// GetByPublicID is a helper method to define mock.On call
//   - placeID
func (_e *MockPlaceRepository_Expecter) GetByPublicID(placeID interface{}) *MockPlaceRepository_GetByPublicID_Call {
	return &MockPlaceRepository_GetByPublicID_Call{Call: _e.mock.On("GetByPublicID", placeID)}
}

func (_c *MockPlaceRepository_GetByPublicID_Call) Run(run func(placeID string)) *MockPlaceRepository_GetByPublicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPlaceRepository_GetByPublicID_Call) Return(place entity.Place, err error) *MockPlaceRepository_GetByPublicID_Call {
	_c.Call.Return(place, err)
	return _c
}

func (_c *MockPlaceRepository_GetByPublicID_Call) RunAndReturn(run func(placeID string) (entity.Place, error)) *MockPlaceRepository_GetByPublicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPublicIDFull provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) GetByPublicIDFull(placeID string) (entity.Place, error) {
	ret := _mock.Called(placeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicIDFull")
	}

	var r0 entity.Place
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (entity.Place, error)); ok {
		return returnFunc(placeID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) entity.Place); ok {
		r0 = returnFunc(placeID)
	} else {
		r0 = ret.Get(0).(entity.Place)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(placeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlaceRepository_GetByPublicIDFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPublicIDFull'
type MockPlaceRepository_GetByPublicIDFull_Call struct {
	*mock.Call
}

// GetByPublicIDFull is a helper method to define mock.On call
//   - placeID
func (_e *MockPlaceRepository_Expecter) GetByPublicIDFull(placeID interface{}) *MockPlaceRepository_GetByPublicIDFull_Call {
	return &MockPlaceRepository_GetByPublicIDFull_Call{Call: _e.mock.On("GetByPublicIDFull", placeID)}
}

func (_c *MockPlaceRepository_GetByPublicIDFull_Call) Run(run func(placeID string)) *MockPlaceRepository_GetByPublicIDFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPlaceRepository_GetByPublicIDFull_Call) Return(place entity.Place, err error) *MockPlaceRepository_GetByPublicIDFull_Call {
	_c.Call.Return(place, err)
	return _c
}

func (_c *MockPlaceRepository_GetByPublicIDFull_Call) RunAndReturn(run func(placeID string) (entity.Place, error)) *MockPlaceRepository_GetByPublicIDFull_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockPlaceRepository
func (_mock *MockPlaceRepository) Update(p entity.Place) error {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.Place) error); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlaceRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPlaceRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - p
func (_e *MockPlaceRepository_Expecter) Update(p interface{}) *MockPlaceRepository_Update_Call {
	return &MockPlaceRepository_Update_Call{Call: _e.mock.On("Update", p)}
}

func (_c *MockPlaceRepository_Update_Call) Run(run func(p entity.Place)) *MockPlaceRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Place))
	})
	return _c
}

func (_c *MockPlaceRepository_Update_Call) Return(err error) *MockPlaceRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlaceRepository_Update_Call) RunAndReturn(run func(p entity.Place) error) *MockPlaceRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackRepository creates a new instance of MockPackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackRepository {
	mock := &MockPackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPackRepository is an autogenerated mock type for the PackRepository type
type MockPackRepository struct {
	mock.Mock
}

type MockPackRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackRepository) EXPECT() *MockPackRepository_Expecter {
	return &MockPackRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPackRepository
func (_mock *MockPackRepository) Create(p entity.Pack) error {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.Pack) error); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPackRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - p
func (_e *MockPackRepository_Expecter) Create(p interface{}) *MockPackRepository_Create_Call {
	return &MockPackRepository_Create_Call{Call: _e.mock.On("Create", p)}
}

func (_c *MockPackRepository_Create_Call) Run(run func(p entity.Pack)) *MockPackRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Pack))
	})
	return _c
}

func (_c *MockPackRepository_Create_Call) Return(err error) *MockPackRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackRepository_Create_Call) RunAndReturn(run func(p entity.Pack) error) *MockPackRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameOrAuthorFull provides a mock function for the type MockPackRepository
func (_mock *MockPackRepository) GetByNameOrAuthorFull(query string) ([]entity.Pack, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameOrAuthorFull")
	}

	var r0 []entity.Pack
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]entity.Pack, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []entity.Pack); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackRepository_GetByNameOrAuthorFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameOrAuthorFull'
type MockPackRepository_GetByNameOrAuthorFull_Call struct {
	*mock.Call
}

// GetByNameOrAuthorFull is a helper method to define mock.On call
//   - query
func (_e *MockPackRepository_Expecter) GetByNameOrAuthorFull(query interface{}) *MockPackRepository_GetByNameOrAuthorFull_Call {
	return &MockPackRepository_GetByNameOrAuthorFull_Call{Call: _e.mock.On("GetByNameOrAuthorFull", query)}
}

func (_c *MockPackRepository_GetByNameOrAuthorFull_Call) Run(run func(query string)) *MockPackRepository_GetByNameOrAuthorFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackRepository_GetByNameOrAuthorFull_Call) Return(packs []entity.Pack, err error) *MockPackRepository_GetByNameOrAuthorFull_Call {
	_c.Call.Return(packs, err)
	return _c
}

func (_c *MockPackRepository_GetByNameOrAuthorFull_Call) RunAndReturn(run func(query string) ([]entity.Pack, error)) *MockPackRepository_GetByNameOrAuthorFull_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPublicIDFull provides a mock function for the type MockPackRepository
func (_mock *MockPackRepository) GetByPublicIDFull(id string) (entity.Pack, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicIDFull")
	}

	var r0 entity.Pack
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (entity.Pack, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) entity.Pack); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(entity.Pack)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackRepository_GetByPublicIDFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPublicIDFull'
type MockPackRepository_GetByPublicIDFull_Call struct {
	*mock.Call
}

// GetByPublicIDFull is a helper method to define mock.On call
//   - id
func (_e *MockPackRepository_Expecter) GetByPublicIDFull(id interface{}) *MockPackRepository_GetByPublicIDFull_Call {
	return &MockPackRepository_GetByPublicIDFull_Call{Call: _e.mock.On("GetByPublicIDFull", id)}
}

func (_c *MockPackRepository_GetByPublicIDFull_Call) Run(run func(id string)) *MockPackRepository_GetByPublicIDFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackRepository_GetByPublicIDFull_Call) Return(pack entity.Pack, err error) *MockPackRepository_GetByPublicIDFull_Call {
	_c.Call.Return(pack, err)
	return _c
}

func (_c *MockPackRepository_GetByPublicIDFull_Call) RunAndReturn(run func(id string) (entity.Pack, error)) *MockPackRepository_GetByPublicIDFull_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockPackRepository
func (_mock *MockPackRepository) Update(p entity.Pack) error {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.Pack) error); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPackRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - p
func (_e *MockPackRepository_Expecter) Update(p interface{}) *MockPackRepository_Update_Call {
	return &MockPackRepository_Update_Call{Call: _e.mock.On("Update", p)}
}

func (_c *MockPackRepository_Update_Call) Run(run func(p entity.Pack)) *MockPackRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Pack))
	})
	return _c
}

func (_c *MockPackRepository_Update_Call) Return(err error) *MockPackRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackRepository_Update_Call) RunAndReturn(run func(p entity.Pack) error) *MockPackRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(u entity.User) error {
	ret := _mock.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = returnFunc(u)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - u
func (_e *MockUserRepository_Expecter) Create(u interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", u)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(u entity.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(err error) *MockUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(u entity.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPublicID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByPublicID(id string) (entity.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicID")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (entity.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByPublicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPublicID'
type MockUserRepository_GetByPublicID_Call struct {
	*mock.Call
}

// GetByPublicID is a helper method to define mock.On call
//   - id
func (_e *MockUserRepository_Expecter) GetByPublicID(id interface{}) *MockUserRepository_GetByPublicID_Call {
	return &MockUserRepository_GetByPublicID_Call{Call: _e.mock.On("GetByPublicID", id)}
}

func (_c *MockUserRepository_GetByPublicID_Call) Run(run func(id string)) *MockUserRepository_GetByPublicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByPublicID_Call) Return(user entity.User, err error) *MockUserRepository_GetByPublicID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByPublicID_Call) RunAndReturn(run func(id string) (entity.User, error)) *MockUserRepository_GetByPublicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPublicIDFull provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByPublicIDFull(id string) (entity.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicIDFull")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (entity.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByPublicIDFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPublicIDFull'
type MockUserRepository_GetByPublicIDFull_Call struct {
	*mock.Call
}

// GetByPublicIDFull is a helper method to define mock.On call
//   - id
func (_e *MockUserRepository_Expecter) GetByPublicIDFull(id interface{}) *MockUserRepository_GetByPublicIDFull_Call {
	return &MockUserRepository_GetByPublicIDFull_Call{Call: _e.mock.On("GetByPublicIDFull", id)}
}

func (_c *MockUserRepository_GetByPublicIDFull_Call) Run(run func(id string)) *MockUserRepository_GetByPublicIDFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByPublicIDFull_Call) Return(user entity.User, err error) *MockUserRepository_GetByPublicIDFull_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByPublicIDFull_Call) RunAndReturn(run func(id string) (entity.User, error)) *MockUserRepository_GetByPublicIDFull_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Update(u entity.User) error {
	ret := _mock.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = returnFunc(u)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - u
func (_e *MockUserRepository_Expecter) Update(u interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", u)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(u entity.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(err error) *MockUserRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(u entity.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
